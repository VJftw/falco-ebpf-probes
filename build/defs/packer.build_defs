
PACKER_BINARY = "//third_party/binary:packer"

def packer_artefact(
    name: str,
    template: str,
    vars: dict = {},
    outs: list = [],
    deps: list = [],
    visibility: list = [],
):
    deps = [canonicalise(dep) for dep in deps]
    dep_cmds = [f"sed -i \"s#{dep}#${{abs_plz_out}}/$(out_location {dep})#g\" $SRCS" for dep in deps]
    deps_cmd = "\n".join(dep_cmds)
    
    rendered_template = genrule(
        name = f"_{name}#rendered",
        srcs = [template],
        outs = [f"_{name}#rendered.json"],
        deps = deps,
        cmd = f"""
set -euo pipefail
abs_plz_out="$(dirname "$PWD" | sed "s#$PKG##" | xargs dirname | xargs dirname)"
{deps_cmd}

mv $SRCS $OUTS
""",
    )
    success_file="plz-out/packer/$PKG_DIR/${NAME}_success"

    var_cmds = []
    for key in vars.keys():
        value = vars[key]
        var_cmds += [f"-var '{key}={value}'"]
    vars_cmd = " ".join(var_cmds)
    sh_cmd(
        name = name,
        data = [rendered_template, PACKER_BINARY],
        cmd = f"""
set -euo pipefail

args=(build -var 'success_file={success_file}' {vars_cmd} $(out_location {rendered_template}))
echo "\\\$ packer \\\${{args[@]}}"
export PACKER_LOG=1
mkdir -p "$(dirname {success_file})"
rm -f {success_file}
set +e
$(out_location {PACKER_BINARY}) \\\${{args[@]}}
set -e
if [ ! -f {success_file} ]; then
    echo "Packer did not produce artefact successfully"
    exit 1
else
    echo "Packer produced artefact successfully"
fi
""",
    shell = "/bin/bash",
    labels = ["packer-artefact"],
    )
